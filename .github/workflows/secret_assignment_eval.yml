name: GitHub Secret Evaluation

on:
  workflow_dispatch:
    inputs:
      assignment_name:
        description: 'Assignment name for evaluation'
        required: false
        default: 'GitHub Secret Assignment'
        type: string

jobs:
  secret-test:
    runs-on: ubuntu-latest
    container:
      image: maniator/gh
    permissions:
      actions: read
      contents: read
      pull-requests: write
      issues: write
    outputs:
      issue_found: ${{ steps.find-issue.outputs.issue_found }}
      issue_number: ${{ steps.find-issue.outputs.issue_number }}
      secret_name: ${{ steps.check-secret.outputs.secret_name }}
      secret_exists: ${{ steps.check-secret.outputs.secret_exists }}

    steps:
      # Step 1: Checkout the files here.
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Find Assignment Issue
        id: find-issue
        run: |
          echo "Searching for issue with title containing 'GitHub Secret Assignment EVAL'"

          git config --global --add safe.directory $GITHUB_WORKSPACE

          # Search for open issues with the assignment title using gh CLI with jq built-in
          ISSUE_NUMBER=$(gh issue list --state open --limit 100 --json number,title --jq '.[] | select(.title | test("GitHub Secret Assignment EVAL"; "i")) | .number' | head -1)

          if [ ! -z "$ISSUE_NUMBER" ] && [ "$ISSUE_NUMBER" != "null" ] && [ "$ISSUE_NUMBER" != "" ]; then
            echo "‚úÖ Found assignment issue #$ISSUE_NUMBER"
            echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
            echo "issue_found=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Could not find open issue with title containing 'GitHub Secret Assignment EVAL'"
            echo "Creating assignment evaluation issue..."

            # Create the issue if it doesn't exist using gh issue create
            NEW_ISSUE_URL=$(gh issue create \
              --title "GitHub Secret Assignment EVAL - GitHub Secrets" \
              --body "This issue is used for tracking GitHub Secret Assignment evaluation results. Comments will be posted here automatically when you run the evaluation workflow.")

            # Extract issue number from URL (format: https://github.com/owner/repo/issues/123)
            NEW_ISSUE_NUMBER=$(echo "$NEW_ISSUE_URL" | grep -o '[0-9]\+$')
            echo "‚úÖ Created new issue #$NEW_ISSUE_NUMBER"
            echo "issue_number=$NEW_ISSUE_NUMBER" >> $GITHUB_OUTPUT
            echo "issue_found=true" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for GitHub Secret
        id: check-secret
        if: steps.find-issue.outputs.issue_found == 'true'
        run: |
          SECRET_EXISTS=false
          SECRET_NAME="ASSIGNMENT_SECRET"  # Change this to the expected secret name

          echo "Checking for GitHub secret: $SECRET_NAME"

          # Test if the secret exists by trying to access it
          # We'll check if the secret has a non-empty value
          if [ ! -z "${{ secrets.ASSIGNMENT_SECRET }}" ]; then
            SECRET_EXISTS=true
            echo "‚úÖ Secret '$SECRET_NAME' found and has a value"
          else
            echo "‚ùå Secret '$SECRET_NAME' not found or is empty"
            echo "Please make sure to:"
            echo "1. Go to Settings > Secrets and variables > Actions"
            echo "2. Create a new repository secret named '$SECRET_NAME'"
            echo "3. Give it any non-empty value"
          fi

          echo "secret_exists=$SECRET_EXISTS" >> $GITHUB_OUTPUT
          echo "secret_name=$SECRET_NAME" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  generate-code-for-comment:
    runs-on: ubuntu-latest
    container:
      image: python:3.11-slim
    needs: secret-test
    permissions:
      contents: read
      pull-requests: write
    outputs:
      secret_code: ${{ steps.generate-code.outputs.secret_code }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install git (required for actions)
        run: |
          apt-get update && apt-get install -y git

      - name: Install Python dependencies
        if: needs.secret-test.outputs.secret_exists == 'true'
        run: |
          pip install requests uuid

      - name: Generate secret code
        id: generate-code
        if: needs.secret-test.outputs.secret_exists == 'true'
        run: |
          SECRET_CODE=$(python .github/workflows/scripts/generate_secret_code.py)
          echo "Generated Secret Code: $SECRET_CODE"
          echo "secret_code=$SECRET_CODE" >> $GITHUB_OUTPUT

  comment:
    runs-on: ubuntu-latest
    container:
      image: maniator/gh
    needs: [secret-test, generate-code-for-comment]
    permissions:
      actions: read
      contents: read
      pull-requests: write
      issues: write

    steps:
      # --- Comment on Issue (SUCCESS case) ---
      - name: Comment secret code on Issue (Success)
        if: needs.secret-test.outputs.secret_exists == 'true' && needs.secret-test.outputs.issue_found == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ needs.secret-test.outputs.issue_number }}
          body: |
            üéâ **GitHub Secret Successfully Configured!** üéâ

            **Evaluation Time:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            **Triggered by:** @${{ github.actor }}
            **Workflow Dispatch:** ‚úÖ Successfully used workflow_dispatch trigger

            Excellent work! You have successfully:
            - ‚úÖ Created the GitHub secret `${{ needs.secret-test.outputs.secret_name }}`
            - ‚úÖ Used workflow_dispatch to trigger this evaluation
            - ‚úÖ Secret is accessible to GitHub Actions

            Here's your completion code:

            ```
            ${{ needs.generate-code-for-comment.outputs.secret_code }}
            ```

            **What you accomplished:**
            - üîê Repository secret management
            - üöÄ Manual workflow triggering via workflow_dispatch
            - üìã Issue-based evaluation feedback
            - ‚ö° GitHub Actions automation

            Fantastic job on mastering GitHub secrets and workflow dispatch! üîê‚ú®
          comment-id: github-secret-success

      # --- Comment on Issue (SECRET NOT FOUND case) ---
      - name: Comment on Issue (Secret Not Found)
        if: needs.secret-test.outputs.secret_exists == 'false' && needs.secret-test.outputs.issue_found == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ needs.secret-test.outputs.issue_number }}
          body: |
            ‚ö†Ô∏è **GitHub Secret Not Found** ‚ö†Ô∏è

            **Evaluation Time:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            **Triggered by:** @${{ github.actor }}
            **Workflow Dispatch:** ‚úÖ Successfully used workflow_dispatch trigger

            Great job using workflow_dispatch! However, I couldn't find the required GitHub secret `${{ needs.secret-test.outputs.secret_name }}` in your repository.

            **To complete this assignment, please:**

            1. **Go to your repository Settings** (‚öôÔ∏è tab at the top)
            2. **Navigate to "Secrets and variables" ‚Üí "Actions"** (in the left sidebar)
            3. **Click "New repository secret"** (green button)
            4. **Set the name to:** `${{ needs.secret-test.outputs.secret_name }}`
            5. **Set the value to:** Any non-empty value (e.g., `my-secret-value`, `hello-world`, etc.)
            6. **Click "Add secret"**

            **üìã Quick Reference:**
            ```
            Repository Settings ‚Üí Secrets and variables ‚Üí Actions ‚Üí New repository secret

            Name: ${{ needs.secret-test.outputs.secret_name }}
            Secret: [Your chosen value - can be anything non-empty]
            ```

            **‚ö†Ô∏è Important Notes:**
            - The secret name must be exactly `${{ needs.secret-test.outputs.secret_name }}` (case-sensitive)
            - The secret must have a non-empty value
            - Repository secrets are encrypted and secure
            - Only repository collaborators can view/edit secrets

            **Next Steps:**
            1. Create the secret as described above
            2. Come back to the Actions tab
            3. Find this workflow ("GitHub Secret Evaluation")
            4. Click "Run workflow" again to re-evaluate

            **Need help?** Check the [GitHub documentation on secrets](https://docs.github.com/en/actions/security-guides/encrypted-secrets)
          comment-id: github-secret-not-found

      # --- Additional step to validate secret content (optional) ---
      - name: Validate secret content
        id: validate-secret
        if: needs.secret-test.outputs.secret_exists == 'true' && needs.secret-test.outputs.issue_found == 'true'
        run: |
          SECRET_VALUE="${{ secrets.ASSIGNMENT_SECRET }}"
          SECRET_LENGTH=${#SECRET_VALUE}

          echo "Secret validation:"
          echo "- Secret exists: ‚úÖ"
          echo "- Secret length: $SECRET_LENGTH characters"

          # Optional: Add specific validation rules
          if [ $SECRET_LENGTH -lt 3 ]; then
            echo "‚ö†Ô∏è  Warning: Secret seems very short ($SECRET_LENGTH chars)"
            echo "Consider using a more substantial secret value"
          elif [ $SECRET_LENGTH -gt 100 ]; then
            echo "‚ö†Ô∏è  Warning: Secret is quite long ($SECRET_LENGTH chars)"
            echo "This is fine, but make sure it's intentional"
          else
            echo "‚úÖ Secret length looks good"
          fi

          # Check if secret contains only whitespace
          if [[ "$SECRET_VALUE" =~ ^[[:space:]]*$ ]]; then
            echo "‚ùå Secret contains only whitespace"
            echo "validation_passed=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Secret contains non-whitespace content"
            echo "validation_passed=true" >> $GITHUB_OUTPUT
          fi

      # --- Comment if secret exists but is invalid ---
      - name: Comment on invalid secret content
        if: needs.secret-test.outputs.secret_exists == 'true' && steps.validate-secret.outputs.validation_passed == 'false' && needs.secret-test.outputs.issue_found == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ needs.secret-test.outputs.issue_number }}
          body: |
            ‚ö†Ô∏è **Secret Found But Invalid** ‚ö†Ô∏è

            **Evaluation Time:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            **Triggered by:** @${{ github.actor }}
            **Workflow Dispatch:** ‚úÖ Successfully used workflow_dispatch trigger

            Your GitHub secret `${{ needs.secret-test.outputs.secret_name }}` exists, but it appears to contain only whitespace or empty content.

            **To fix this:**
            1. Go to Settings ‚Üí Secrets and variables ‚Üí Actions
            2. Find the secret `${{ needs.secret-test.outputs.secret_name }}`
            3. Click "Update"
            4. Enter a meaningful value (not just spaces)
            5. Save the changes

            The secret should contain actual content, not just empty spaces or tabs.

            **Next Steps:**
            1. Update the secret with proper content
            2. Return to Actions tab
            3. Run this workflow again using "Run workflow" button

            Try again once you've updated the secret! üîÑ
          comment-id: github-secret-invalid-content

      # --- Comment if issue not found/created ---
      - name: Comment on workflow run (Issue handling)
        if: steps.find-issue.outputs.issue_found == 'false'
        run: |
          echo "‚ùå Could not find or create assignment issue"
          echo "This shouldn't happen as we create the issue automatically"
          echo "Please check repository permissions and try again"
          exit 1
